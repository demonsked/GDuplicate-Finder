loadConfiguration()
apply plugin: 'groovy'
apply plugin: 'oneJar'

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

version = '1.0'

buildscript {
	repositories {
		add(new org.apache.ivy.plugins.resolver.URLResolver()) {
				name = 'GitHub'
				addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
			}
		
		mavenCentral()

		//add repositories for optional dependencies
		mavenRepo urls: ['http://repository.jboss.org/maven2/']
	}
	
	dependencies {
		classpath "curious-attempt-bunny:gradle-onejar:$oneJarVersion"
	}
}
 
dependencies {
	compile project(':FileDuplicateFinderCore')
	groovy group: 'org.codehaus.groovy', name: 'groovy', version: groovyVersion
	compile "commons-beanutils:commons-beanutils:$commonsBeanutilsVersion"
	compile "commons-io:commons-io:$commonsIoVersion"
	compile fileTree(dir: "${config.allLibs}", include: '*.jar')
	compile fileTree(dir: "${config.swtLibs}", include: '*.jar')
	compile fileTree(dir: "${config.swtOsJars}", include: '*.jar')
}

task "create-dirs" << {
   sourceSets.all*.groovy.srcDirs*.each { it.mkdirs() }
   sourceSets.all*.resources.srcDirs*.each { it.mkdirs() }
}


// We can pass a value for the env property to the build with the -P or --project-prop argument when we run Gradle
// for i.e -Pos=linux or -Pos=mac if the os property is not available we assume the default is windows os
def loadConfiguration() {
	def environment  = hasProperty("os") ? os : autodetectOS()
	setProperty "environment ", environment 
	println "os is set to ${environment}"
	
	def configFile = file("config.groovy")
	def config = new ConfigSlurper(environment).parse(configFile.toURL())

	setProperty "config", config	
}

def autodetectOS(){
	def defaultOS = 'mac-cocoa'
	def osName = System.getProperty('os.name').toLowerCase()
	def os = defaultOS

	if ( osName.contains('windows') ){
		os = 'windows'
	}
	if ( osName.contains('linux') ){
		os = 'linux'
	}
	
	if ( defaultOS != os ){
		def arch = System.getProperty('os.arch').contains('64') ? '64' : '32'
		defaultOS = "${os}${arch}"
	}
	defaultOS
}

task oneJar(type: OneJar) {
	mainClass = 'com.sleepcamel.fileduplicatefinder.ui.MainView'
}
oneJar.dependsOn jar

artifacts {
	archives oneJar
}

